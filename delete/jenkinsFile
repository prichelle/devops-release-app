def label = "mypod-${UUID.randomUUID().toString()}"

//default imTagId this id will be added in the k8s name
//the value corresponds to the tag id used to tag the image in the registry
//current implementation is to use the commit id
//app name will be used to define the k8s name. Value will be set from the helm chart 
def imName = "mycluster.icp:8500/demo/devops-demo-frontend"
def imTagId = "001"
def appName = "devops-demo-frontend"


//docker registry
def registryHost = "mycluster.icp:8500";

//namespace where the deployemnt shoudl occurs.
//namespace should be set when deploying the application
def namespace = "demoapp-prod"

// ingress name will be set of the application name ?
def ingressName = "mysampleapp".toLowerCase()

podTemplate(label: label, cloud: 'ICP', containers: [
  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm:v2.12.3', command: 'cat', ttyEnabled: true)
], 
volumes: [ secretVolume( mountPath: '/home/jenkins/.helm' , secretName: 'helmcert')
]) {
    node(label) {
        checkout scm
        try{
            stage ('initialize'){


                def selectedSvc 
                container('kubectl'){
                      def poList = sh (
                                    script: "kubectl get po -n ${namespace} --show-labels | awk 'FNR>1{print \$6}'  | grep frontend",
                                    returnStdout: true
                                ).trim()
                      def listext = poList.tokenize()

                        //checking that the service is not exposed
                      def appSelector = sh (
                                            script: "kubectl get svc -n ${namespace} ${appName}-external -o jsonpath=\"{.spec.selector.instance-release}\"",
                                            returnStdout: true
                                        ).trim()

                     
                     def releasePo = []
                     //def input = "color=PROD,instance-release=devops-demo-frontend-0.5,name=devops-demo-frontend,pod-template-hash=7d56697b5c"
                     
                     poList.tokenize().each{
                          def labels = it.tokenize(',')
                          def lbReleaseName 
                          labels.each {
                              def polabel = it.tokenize('=')
                              def labelName = polabel[0]
                              //echo "label: ${labelName}"
                              if (labelName == "instance-release")
                                lbReleaseName = polabel[1]
                          }
                          echo "release name: ${lbReleaseName}" 
                          if (lbReleaseName != appSelector)
                            releasePo << lbReleaseName
                     }
                      selectedSvc = input( id: 'userInputsvcList', message: 'Choose deployment to rollback to', 
                            parameters: [ 
                                [$class: 'ChoiceParameterDefinition', choices: releasePo, description: 'Properties', name: 'prop'] 
                            ]
                        )

                    echo "select instance: ${selectedSvc}" 
                          //def selectedSvcList = selectedSvc.tokenize('-')
                    imTagId = selectedSvc.tokenize('-').last()
                    echo "image tag id: ${imTagId}" 
                    appName = selectedSvc.substring(0,selectedSvc.indexOf('-' + imTagId))
                    echo "app name: ${appName}"

                }


/*

                def userInput = input(
                    id: 'userInput', message: 'delete previous release?', parameters: [
                    [$class: 'TextParameterDefinition', defaultValue: 'devops-demo-frontend', description: 'application name', name: 'name'],
                    [$class: 'TextParameterDefinition', defaultValue: '0.1', description: 'Deployed release', name: 'tag']
                    ]
                )

                imTagId = userInput['tag']
                echo "image tag id: ${imTagId}" 

                appName = userInput['name']
 */
                echo "deleting `application ${appName} version ${imTagId}" 
               
            }
        }  catch(exe)
        {
            echo "${exe}"
            error("[FAILURE] Failed to initialize")
        }

        try{
            removeOldDeployment( namespace,  imTagId,  appName)
        } catch(exe) {
            echo "${exe}"
            error("[FAILURE] Failed to update")
           
        }
   }
}

def removeOldDeployment(String namespace, String imTagId, String appName){
    stage ('remove'){

        def svcIdtoDelete
        def exposedSvcId

        def appSelector

        container ('kubectl') {
            //checking that the service is not exposed
            appSelector = sh (
                                script: "kubectl get svc -n ${namespace} ${appName}-external -o jsonpath=\"{.spec.selector.instance-release}\"",
                                returnStdout: true
                            ).trim()

            def appRelease = "${appName}-${imTagId}"

     
            if (appSelector != appRelease ) {
                //rollbacl old deployment

               container ('helm'){
                    def cleanTag = imTagId.replaceAll('\\.','')
                   //deleting old deployment
                    sh "helm delete --tls --purge ${appName}-${cleanTag}-${namespace}"
                    echo "old service deleted"
                }
            }else{
                error("FAILURE ${appRelease} is exposed")
            }
        }
    }
}

